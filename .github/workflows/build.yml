name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x

      - name: Restore dependencies
        run: dotnet restore 'User Service/User Service/User Service.csproj'

      - name: Build
        run: dotnet build 'User Service/User Service/User Service.csproj' --no-restore --configuration Release

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x

      - name: Restore dependencies
        run: dotnet restore 'User Service/User Service/User Service.csproj'

      - name: Test
        run: dotnet test 'User Service/User Service/User Service.csproj' --no-build --verbosity normal  
  sonar:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
        java-package: 'jdk'
        architecture: 'x64'

    - name: Build Docker image
      run: docker build -t custom-sonar-scanner:latest -f docker/Dockerfile .

    - name: Run SonarQube Analysis
      run: |
        docker run --rm -v ${GITHUB_WORKSPACE}:/usr/src/app \
          -e SONAR_TOKEN=${{ secrets.SONAR_TOKEN }} \
          -e JAVA_HOME=/usr/local/openjdk-17 \
          custom-sonar-scanner:latest sonar-scanner \
            -Dsonar.projectKey=UserMicroservice \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    - name: Build for SonarQube
      run: dotnet build 'User Service/User Service/User Service.csproj'

    - name: End SonarQube Analysis
      run: docker run --rm -v ${GITHUB_WORKSPACE}:/usr/src/app \
          -e SONAR_TOKEN=${{ secrets.SONAR_TOKEN }} \
          -e JAVA_HOME=/usr/local/openjdk-17 \
          custom-sonar-scanner:latest sonar-scanner \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} -X
  sonarqube:
    runs-on: ubuntu-latest
  
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
        java-package: 'jdk'
        architecture: 'x64'
  
    - name: Set JAVA_HOME
      run: echo "JAVA_HOME=$(find /usr/lib/jvm -name 'java-17*' -type d)" >> $GITHUB_ENV
  
    - name: Check JAVA_HOME
      run: echo $JAVA_HOME
  
    - name: Setup SonarQube
      uses: SonarSource/sonarcloud-github-action@v1
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: .
  
    - name: Run SonarQube Analysis
      run: dotnet sonarscanner begin /k:"UserMicroservice" /d:sonar.login="squ_6ded64fec6e02939b9b2b80bd1d62effff46f061" /d:sonar.host.url="http://localhost:9000"
  
    - name: Build for SonarQube
      run: dotnet build 'User Service/User Service/User Service.csproj'
  
    - name: End SonarQube Analysis
      run: dotnet sonarscanner end /d:sonar.login="squ_6ded64fec6e02939b9b2b80bd1d62effff46f061"


  docker:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x

      - name: Restore dependencies
        run: dotnet restore 'User Service/User Service/User Service.csproj'

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        
      - name: Create Docker network
        run: docker network create backend

      - name: Docker Compose Build
        run: docker-compose -f "User Service/docker-compose.yml" build

      - name: Docker Compose Up
        run: docker-compose -f "User Service/docker-compose.yml" up -d

  kubernetes:
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Setup kubeconfig
        run: echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: kubectl apply -f k8s/deployment.yml
