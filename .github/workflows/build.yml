name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x

      - name: Restore dependencies
        run: dotnet restore 'User Service/User Service/User Service.csproj'

      - name: Build
        run: dotnet build 'User Service/User Service/User Service.csproj' --no-restore --configuration Release

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x

      - name: Restore dependencies
        run: dotnet restore 'User Service/User Service/User Service.csproj'

      - name: Test
        run: dotnet test 'User Service/User Service/User Service.csproj' --no-build --verbosity normal  
  sonarqube:
    needs: test
    runs-on: ubuntu-latest
  
  env:
    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  steps:
    - name: Setup SonarQube
      uses: SonarSource/sonarcloud-github-action@v1
  
    - name: Run SonarQube Analysis
      run: dotnet sonarscanner begin /k:"UserMicroservice" /d:sonar.login="squ_6ded64fec6e02939b9b2b80bd1d62effff46f061" /d:sonar.host.url="http://localhost:9000"
  
    - name: Build for SonarQube
      run: dotnet build 'User Service/User Service/User Service.csproj'
  
    - name: End SonarQube Analysis
      run: dotnet sonarscanner end /d:sonar.login="squ_6ded64fec6e02939b9b2b80bd1d62effff46f061"

  docker:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x

      - name: Restore dependencies
        run: dotnet restore 'User Service/User Service/User Service.csproj'

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker Compose Build
        run: docker-compose -f User Service/docker-compose.yml build

      - name: Docker Compose Up
        run: docker-compose -f User Service/docker-compose.yml up -d

  kubernetes:
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Setup kubeconfig
        run: echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: kubectl apply -f k8s/deployment.yml
