name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./User Service  

    - name: Build
      run: dotnet build --no-restore
      working-directory: ./User Service

  code_quality:
    runs-on: windows-latest
    needs: build    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
        working-directory: ./User Service
      - name: Build and analyze
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"User microservice" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        working-directory: ./User Service

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Run tests
      run: dotnet test --no-build --verbosity normal
      working-directory: ./User Service

  docker_build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker buildx build --push --tag ${{ secrets.DOCKER_USERNAME }}/user-service:${{ github.sha }} .
      working-directory: ./User Service/User Service
        
  security_scan:
    runs-on: ubuntu-latest
    needs: docker_build

    steps:
    - uses: actions/checkout@v4

    - name: Security scan with Snyk
      uses: snyk/actions/docker@v2
      with:
        image: ${{ secrets.DOCKER_USERNAME }}/user-service:${{ github.sha }}
        command: test
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: security_scan

    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Deploy to Kubernetes
      run: |
        kubectl set image deployment/user-service user-service=${{ secrets.DOCKER_USERNAME }}/user-service:${{ github.sha }} --record
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}

  logging:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - uses: actions/checkout@v4

    - name: Set up logging config
      run: |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: user-service-logging-config
        data:
          log_config: |-
            <your logging configuration here>
        EOF
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}
