name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./User Service  

    - name: Build
      run: dotnet build --no-restore
      working-directory: ./User Service

  code_quality:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Setup SonarQube
      uses: sonarsource/sonarcloud-github-action@v1.8
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Run SonarQube analysis
      run: |
        dotnet-sonarscanner begin /k:"${{ secrets.SONAR_PROJECT_KEY }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        dotnet build ./User Service
        dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      working-directory: ./User Service

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Run tests
      run: dotnet test --no-build --verbosity normal
      working-directory: ./User Service

  docker_build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker buildx build --push --tag ${{ secrets.DOCKER_USERNAME }}/my-microservice:${{ github.sha }} .
        
  security_scan:
    runs-on: ubuntu-latest
    needs: docker_build

    steps:
    - uses: actions/checkout@v4

    - name: Security scan with Snyk
      uses: snyk/actions/docker@v2
      with:
        image: ${{ secrets.DOCKER_USERNAME }}/my-microservice:${{ github.sha }}
        command: test
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: security_scan

    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Deploy to Kubernetes
      run: |
        kubectl set image deployment/my-microservice my-microservice=${{ secrets.DOCKER_USERNAME }}/my-microservice:${{ github.sha }} --record
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}

  logging:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - uses: actions/checkout@v4

    - name: Set up logging config
      run: |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: my-microservice-logging-config
        data:
          log_config: |-
            <your logging configuration here>
        EOF
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}
